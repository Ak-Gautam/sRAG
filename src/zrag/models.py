"""Core data models used across the zRAG library.

This module defines lightweight dataclasses that capture the essential
information exchanged between components in the retrieval augmented
pipeline. Keeping definitions in a single place promotes consistency,
robust typing, and simpler dependency graphs for the revamped
architecture.
"""

from __future__ import annotations

from dataclasses import dataclass, field
from typing import Any, Dict, Optional

Metadata = Dict[str, Any]
"""Type alias representing metadata dictionaries carried by documents and chunks."""

EmbeddingVector = Any
"""Type alias for embedding vectors (commonly ``numpy.ndarray`` instances)."""
"""Type alias for embedding vectors generated by the embedding component."""


@dataclass(slots=True)
class Document:
    """Represents a loaded document and its associated metadata.

    Attributes:
        document_id: Stable identifier for the document.
        text: Extracted, plain-text content of the document.
        metadata: Additional contextual information (file path, type, etc.).
    """

    document_id: str
    text: str
    metadata: Metadata = field(default_factory=dict)

    def __post_init__(self) -> None:
        if not isinstance(self.document_id, str) or not self.document_id:
            raise ValueError("document_id must be a non-empty string")
        if not isinstance(self.text, str):
            raise ValueError("text must be a string")
        if not isinstance(self.metadata, dict):
            raise ValueError("metadata must be a dictionary")
        # Normalise string content to avoid downstream whitespace surprises.
        self.text = self.text.strip()

    def __repr__(self) -> str:  # pragma: no cover - cosmetic helper
        preview = self.text[:20].replace("\n", " ") + ("..." if len(self.text) > 20 else "")
        return f"Document(document_id='{self.document_id}', metadata={self.metadata}, text='{preview}')"


@dataclass(slots=True)
class Node:
    """Represents a chunk of content produced during document splitting.

    Attributes:
        text: The textual payload of the chunk.
        metadata: Arbitrary metadata describing provenance and spans.
        embedding: Optional embedding vector attached after encoding.
    """

    text: str
    metadata: Metadata = field(default_factory=dict)
    embedding: Optional[EmbeddingVector] = None

    def __post_init__(self) -> None:
        if not isinstance(self.text, str):
            raise ValueError("text must be a string")
        if not isinstance(self.metadata, dict):
            raise ValueError("metadata must be a dictionary")
        self.text = self.text.strip()

    def __repr__(self) -> str:  # pragma: no cover - cosmetic helper
        preview = self.text[:20].replace("\n", " ") + ("..." if len(self.text) > 20 else "")
        return f"Node(text='{preview}', metadata={self.metadata})"
